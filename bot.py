import logging
import os
import psycopg2
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, cast
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    exit(1)

if not DATABASE_URL:
    logger.error("DATABASE_URL not found in environment variables")
    exit(1)

class DatabaseManager:
    def __init__(self, connection_string: str):
        self.conn_string = connection_string
        self.init_db()

    def get_connection(self) -> psycopg2.extensions.connection:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            return psycopg2.connect(self.conn_string)
        except Exception as e:
            logger.error(f"Database connection error: {e}")
            raise

    def init_db(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS chat_settings (
                            chat_id BIGINT PRIMARY KEY,
                            welcome_message TEXT DEFAULT 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}!',
                            min_account_age_days INTEGER DEFAULT 1,
                            min_join_date_days INTEGER DEFAULT 0,
                            restrict_new_users BOOLEAN DEFAULT TRUE,
                            delete_service_messages BOOLEAN DEFAULT TRUE,
                            enabled BOOLEAN DEFAULT TRUE,
                            max_warnings INTEGER DEFAULT 3,
                            anti_flood_enabled BOOLEAN DEFAULT TRUE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    conn.commit()
                    logger.info("Database initialized successfully")
        except Exception as e:
            logger.error(f"Database initialization error: {e}")
            raise

    def get_chat_settings(self, chat_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        'SELECT * FROM chat_settings WHERE chat_id = %s',
                        (chat_id,)
                    )
                    result = cursor.fetchone()
                    
                    if result:
                        return {
                            'chat_id': result[0],
                            'welcome_message': str(result[1]),
                            'min_account_age_days': int(result[2]),
                            'min_join_date_days': int(result[3]),
                            'restrict_new_users': bool(result[4]),
                            'delete_service_messages': bool(result[5]),
                            'enabled': bool(result[6]),
                            'max_warnings': int(result[7]),
                            'anti_flood_enabled': bool(result[8])
                        }
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        default_settings: Dict[str, Any] = {
                            'chat_id': chat_id,
                            'welcome_message': 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}!',
                            'min_account_age_days': 1,
                            'min_join_date_days': 0,
                            'restrict_new_users': True,
                            'delete_service_messages': True,
                            'enabled': True,
                            'max_warnings': 3,
                            'anti_flood_enabled': True
                        }
                        self.save_chat_settings(default_settings)
                        return default_settings
        except Exception as e:
            logger.error(f"Error getting chat settings: {e}")
            return None

    def save_chat_settings(self, settings: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('''
                        INSERT INTO chat_settings 
                        (chat_id, welcome_message, min_account_age_days, min_join_date_days, 
                         restrict_new_users, delete_service_messages, enabled, max_warnings, anti_flood_enabled)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                        ON CONFLICT (chat_id) DO UPDATE SET
                        welcome_message = EXCLUDED.welcome_message,
                        min_account_age_days = EXCLUDED.min_account_age_days,
                        min_join_date_days = EXCLUDED.min_join_date_days,
                        restrict_new_users = EXCLUDED.restrict_new_users,
                        delete_service_messages = EXCLUDED.delete_service_messages,
                        enabled = EXCLUDED.enabled,
                        max_warnings = EXCLUDED.max_warnings,
                        anti_flood_enabled = EXCLUDED.anti_flood_enabled
                    ''', (
                        settings['chat_id'],
                        settings['welcome_message'],
                        settings['min_account_age_days'],
                        settings['min_join_date_days'],
                        settings['restrict_new_users'],
                        settings['delete_service_messages'],
                        settings['enabled'],
                        settings['max_warnings'],
                        settings['anti_flood_enabled']
                    ))
                    conn.commit()
        except Exception as e:
            logger.error(f"Error saving chat settings: {e}")
            raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = DatabaseManager(DATABASE_URL)
    logger.info("Database connected successfully")
except Exception as e:
    logger.error(f"Failed to initialize database: {e}")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    chat = update.effective_chat
    message = update.message
    
    if not user or not chat or not message:
        return
        
    if chat.type == 'private':
        await message.reply_text(
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
            "üõ°Ô∏è <b>–Ø - –±–æ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞\n"
            "‚Ä¢ –£–º–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n\n"
            "<b>–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.reply_text(
            "üõ°Ô∏è <b>–ë–æ—Ç –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞—â–∏—Ç—ã",
            parse_mode=ParseMode.HTML
        )

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /settings"""
    chat = update.effective_chat
    user = update.effective_user
    message = update.message
    
    if not chat or not user or not message:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if chat.type != 'private':
        try:
            member = await context.bot.get_chat_member(chat.id, user.id)
            if member and member.status not in ['administrator', 'creator']:
                await message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞")
                return
        except Exception as e:
            logger.error(f"Error checking admin rights: {e}")
    
    settings_data = db.get_chat_settings(chat.id)
    if not settings_data:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="set_welcome")],
        [InlineKeyboardButton("üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="set_age")],
        [InlineKeyboardButton("‚ö° –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status = "‚úÖ –í–ö–õ" if settings_data['enabled'] else "‚ùå –í–´–ö–õ"
    restrict = "‚úÖ –í–ö–õ" if settings_data['restrict_new_users'] else "‚ùå –í–´–ö–õ"
    service = "‚úÖ –í–ö–õ" if settings_data['delete_service_messages'] else "‚ùå –í–´–ö–õ"
    
    await message.reply_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã</b>\n\n"
        f"üõ°Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìÖ –ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç: {settings_data['min_account_age_days']} –¥–Ω.\n"
        f"üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {restrict}\n"
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {service}\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</i>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="set_welcome")],
        [InlineKeyboardButton("üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="set_age")],
        [InlineKeyboardButton("‚ö° –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status = "‚úÖ –í–ö–õ" if settings_data['enabled'] else "‚ùå –í–´–ö–õ"
    restrict = "‚úÖ –í–ö–õ" if settings_data['restrict_new_users'] else "‚ùå –í–´–ö–õ"
    service = "‚úÖ –í–ö–õ" if settings_data['delete_service_messages'] else "‚ùå –í–´–ö–õ"
    
    text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã</b>\n\n"
        f"üõ°Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìÖ –ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç: {settings_data['min_account_age_days']} –¥–Ω.\n"
        f"üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {restrict}\n"
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {service}\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</i>"
    )
    
    if message_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    if not query or not query.message:
        return
        
    await query.answer()
    
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    data = query.data
    
    if not data:
        return
    
    if data == "close":
        await query.message.delete()
        return
        
    elif data == "set_age":
        keyboard = [
            [InlineKeyboardButton("0 –¥–Ω–µ–π", callback_data="age_0")],
            [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="age_1")],
            [InlineKeyboardButton("3 –¥–Ω—è", callback_data="age_3")],
            [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="age_7")],
            [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="age_30")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</b>",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    elif data.startswith("age_"):
        days = int(data.split("_")[1])
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data['min_account_age_days'] = days
            db.save_chat_settings(settings_data)
            await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {days} –¥–Ω–µ–π")
            await show_settings_menu(update, context, chat_id, message_id)
        
    elif data == "main_settings":
        settings_data = db.get_chat_settings(chat_id)
        if not settings_data:
            return
            
        keyboard = [
            [
                InlineKeyboardButton("üõ°Ô∏è –í–∫–ª/–í—ã–∫–ª", callback_data="toggle_enable"),
                InlineKeyboardButton("üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="toggle_restrict")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ", callback_data="toggle_service"),
                InlineKeyboardButton("üåä –ê–Ω—Ç–∏-—Ñ–ª—É–¥", callback_data="toggle_flood")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        enable_status = "‚úÖ –í–ö–õ" if settings_data['enabled'] else "‚ùå –í–´–ö–õ"
        restrict_status = "‚úÖ –í–ö–õ" if settings_data['restrict_new_users'] else "‚ùå –í–´–ö–õ"
        service_status = "‚úÖ –í–ö–õ" if settings_data['delete_service_messages'] else "‚ùå –í–´–ö–õ"
        flood_status = "‚úÖ –í–ö–õ" if settings_data['anti_flood_enabled'] else "‚ùå –í–´–ö–õ"
        
        await query.edit_message_text(
            f"‚ö° <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üõ°Ô∏è –ë–æ—Ç: {enable_status}\n"
            f"üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {restrict_status}\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ: {service_status}\n"
            f"üåä –ê–Ω—Ç–∏-—Ñ–ª—É–¥: {flood_status}\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:</i>",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    elif data.startswith("toggle_"):
        settings_data = db.get_chat_settings(chat_id)
        if not settings_data:
            return
            
        status_text = ""
        if data == "toggle_enable":
            settings_data['enabled'] = not settings_data['enabled']
            status_text = "–≤–∫–ª—é—á–µ–Ω" if settings_data['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        elif data == "toggle_restrict":
            settings_data['restrict_new_users'] = not settings_data['restrict_new_users']
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if settings_data['restrict_new_users'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        elif data == "toggle_service":
            settings_data['delete_service_messages'] = not settings_data['delete_service_messages']
            status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if settings_data['delete_service_messages'] else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        elif data == "toggle_flood":
            settings_data['anti_flood_enabled'] = not settings_data['anti_flood_enabled']
            status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if settings_data['anti_flood_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            
        db.save_chat_settings(settings_data)
        await query.answer(f"‚úÖ {status_text.capitalize()}")
        await show_settings_menu(update, context, chat_id, message_id)
        
    elif data == "back":
        await show_settings_menu(update, context, chat_id, message_id)
        
    elif data == "set_welcome":
        await query.edit_message_text(
            "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n"
            "<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</i>\n"
            "<code>{name}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "<code>{mention}</code> - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "<code>{chat}</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}!",
            parse_mode=ParseMode.HTML
        )
        if context.user_data is not None:
            context.user_data['awaiting_welcome'] = True
            context.user_data['settings_message_id'] = message_id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    chat = update.effective_chat
    
    if not message or not chat or not context.user_data:
        return
        
    if 'awaiting_welcome' in context.user_data:
        chat_id = chat.id
        welcome_message = message.text
        
        if not welcome_message:
            return
            
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data['welcome_message'] = welcome_message
            db.save_chat_settings(settings_data)
            
            del context.user_data['awaiting_welcome']
            if 'settings_message_id' in context.user_data:
                del context.user_data['settings_message_id']
                
            await message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            message_id = context.user_data.get('settings_message_id')
            if message_id:
                await show_settings_menu(update, context, chat_id, message_id)

async def new_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    chat = update.effective_chat
    message = update.message
    
    if not chat or not message:
        return
        
    settings_data = db.get_chat_settings(chat.id)
    
    if not settings_data or not settings_data['enabled']:
        return
    
    for member in message.new_chat_members:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ member –Ω–µ None
        if not member:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if member.id == context.bot.id:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —è–≤–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–∞
        if settings_data['min_account_age_days'] > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç—É date
            member_date = getattr(member, 'date', None)
            if member_date:
                # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è account_age_delta
                account_age_delta: timedelta = datetime.now().replace(tzinfo=None) - member_date.replace(tzinfo=None)
                account_age_days: int = account_age_delta.days
                
                if account_age_days < settings_data['min_account_age_days']:
                    try:
                        await context.bot.ban_chat_member(chat.id, member.id)
                        await context.bot.unban_chat_member(chat.id, member.id)
                        logger.info(f"Kicked user {member.id} for young account")
                        continue
                    except Exception as e:
                        logger.error(f"Error kicking user: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        welcome_text = settings_data['welcome_message']
        welcome_text = welcome_text.replace('{name}', member.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        welcome_text = welcome_text.replace('{mention}', f'<a href="tg://user?id={member.id}">{member.first_name}</a>')
        welcome_text = welcome_text.replace('{chat}', chat.title or '—á–∞—Ç')
        
        try:
            await message.reply_text(welcome_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"Error sending welcome message: {e}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if settings_data['delete_service_messages']:
        try:
            await message.delete()
        except Exception as e:
            logger.error(f"Error deleting service message: {e}")

async def enable_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /enable"""
    chat = update.effective_chat
    message = update.message
    
    if not chat or not message:
        return
        
    settings_data = db.get_chat_settings(chat.id)
    if settings_data:
        settings_data['enabled'] = True
        db.save_chat_settings(settings_data)
        await message.reply_text("‚úÖ –ë–æ—Ç –∑–∞—â–∏—Ç—ã –≤–∫–ª—é—á–µ–Ω!")

async def disable_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /disable"""
    chat = update.effective_chat
    message = update.message
    
    if not chat or not message:
        return
        
    settings_data = db.get_chat_settings(chat.id)
    if settings_data:
        settings_data['enabled'] = False
        db.save_chat_settings(settings_data)
        await message.reply_text("‚ùå –ë–æ—Ç –∑–∞—â–∏—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    message = update.message
    
    if not message:
        return
        
    help_text = """
üõ°Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—â–∏—Ç—ã:</b>

/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã
/enable - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
/disable - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞

<b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!</b>
    """
    await message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        token = cast(str, BOT_TOKEN)
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("settings", settings))
        application.add_handler(CommandHandler("enable", enable_bot))
        application.add_handler(CommandHandler("disable", disable_bot))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_members))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Bot error: {e}")

if __name__ == '__main__':
    main()