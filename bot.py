import asyncio
import logging
import os
import psycopg2
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, cast, Tuple, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message, Chat, User
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    exit(1)

if not DATABASE_URL:
    logger.error("DATABASE_URL not found in environment variables")
    exit(1)

class DatabaseManager:
    def __init__(self, connection_string: str):
        self.conn_string = connection_string
        self.init_db()
        self.recreate_table_properly()
        self.update_database_schema()
        self.check_table_structure()

    def get_connection(self) -> psycopg2.extensions.connection:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            return psycopg2.connect(self.conn_string)
        except Exception as e:
            logger.error(f"Database connection error: {e}")
            raise

    def init_db(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS chat_settings (
                            chat_id BIGINT PRIMARY KEY,
                            welcome_message TEXT DEFAULT 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ {chat}!',
                            min_account_age_days INTEGER DEFAULT 1,
                            min_join_date_days INTEGER DEFAULT 0,
                            restrict_new_users BOOLEAN DEFAULT TRUE,
                            delete_service_messages BOOLEAN DEFAULT TRUE,
                            enabled BOOLEAN DEFAULT TRUE,
                            max_warnings INTEGER DEFAULT 3,
                            anti_flood_enabled BOOLEAN DEFAULT TRUE,
                            protect_comments BOOLEAN DEFAULT TRUE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS statistics (
                            id SERIAL PRIMARY KEY,
                            chat_id BIGINT NOT NULL,
                            user_id BIGINT,
                            action_type VARCHAR(50) NOT NULL,
                            details TEXT,
                            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    
                    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS user_warnings (
                            id SERIAL PRIMARY KEY,
                            chat_id BIGINT NOT NULL,
                            user_id BIGINT NOT NULL,
                            warnings_count INTEGER DEFAULT 0,
                            last_warning TIMESTAMP,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            UNIQUE(chat_id, user_id)
                        )
                    ''')
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS flood_control (
                            id SERIAL PRIMARY KEY,
                            chat_id BIGINT NOT NULL,
                            user_id BIGINT NOT NULL,
                            message_count INTEGER DEFAULT 1,
                            last_message TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    
                    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    cursor.execute('CREATE INDEX IF NOT EXISTS idx_statistics_chat_id ON statistics(chat_id)')
                    cursor.execute('CREATE INDEX IF NOT EXISTS idx_statistics_timestamp ON statistics(timestamp)')
                    cursor.execute('CREATE INDEX IF NOT EXISTS idx_statistics_action ON statistics(action_type)')
                    cursor.execute('CREATE INDEX IF NOT EXISTS idx_warnings_chat_user ON user_warnings(chat_id, user_id)')
                    cursor.execute('CREATE INDEX IF NOT EXISTS idx_flood_control_chat_user ON flood_control(chat_id, user_id)')
                    cursor.execute('CREATE INDEX IF NOT EXISTS idx_flood_control_timestamp ON flood_control(last_message)')
                    
                    conn.commit()
                    logger.info("Database initialized successfully")
        except Exception as e:
            logger.error(f"Database initialization error: {e}")
            raise

    def get_chat_settings(self, chat_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        'SELECT * FROM chat_settings WHERE chat_id = %s',
                        (chat_id,)
                    )
                    result = cursor.fetchone()
                    
                    if result:
                        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î: {result}")
                        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(result)}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                        if len(result) == 11:  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å protect_comments –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 9
                            settings = {
                                'chat_id': result[0],
                                'welcome_message': str(result[1]),
                                'min_account_age_days': int(result[2]),
                                'min_join_date_days': int(result[3]),
                                'restrict_new_users': bool(result[4]),
                                'delete_service_messages': bool(result[5]),
                                'enabled': bool(result[6]),
                                'max_warnings': int(result[7]),
                                'anti_flood_enabled': bool(result[8]),
                                'protect_comments': bool(result[9]),  # protect_comments –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 9!
                                'created_at': result[10]  # created_at –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 10
                            }
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º protect_comments —Å –∏–Ω–¥–µ–∫—Å–∞ 9: {result[9]}")
                        elif len(result) >= 10:  # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                            settings = {
                                'chat_id': result[0],
                                'welcome_message': str(result[1]),
                                'min_account_age_days': int(result[2]),
                                'min_join_date_days': int(result[3]),
                                'restrict_new_users': bool(result[4]),
                                'delete_service_messages': bool(result[5]),
                                'enabled': bool(result[6]),
                                'max_warnings': int(result[7]),
                                'anti_flood_enabled': bool(result[8]),
                                'protect_comments': bool(result[9]) if len(result) > 9 else True
                            }
                        else:
                            # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–µ–Ω—å—à–µ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            settings = {
                                'chat_id': result[0],
                                'welcome_message': str(result[1]) if len(result) > 1 else 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ {chat}!',
                                'min_account_age_days': int(result[2]) if len(result) > 2 else 1,
                                'min_join_date_days': int(result[3]) if len(result) > 3 else 0,
                                'restrict_new_users': bool(result[4]) if len(result) > 4 else True,
                                'delete_service_messages': bool(result[5]) if len(result) > 5 else True,
                                'enabled': bool(result[6]) if len(result) > 6 else True,
                                'max_warnings': int(result[7]) if len(result) > 7 else 3,
                                'anti_flood_enabled': bool(result[8]) if len(result) > 8 else True,
                                'protect_comments': True  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
                            }
                        
                        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ protect_comments: {settings.get('protect_comments')}")
                        return settings
                    else:
                        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        default_settings: Dict[str, Any] = {
                            'chat_id': chat_id,
                            'welcome_message': 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ {chat}!',
                            'min_account_age_days': 1,
                            'min_join_date_days': 0,
                            'restrict_new_users': True,
                            'delete_service_messages': True,
                            'enabled': True,
                            'max_warnings': 3,
                            'anti_flood_enabled': True,
                            'protect_comments': True
                        }
                        self.save_chat_settings(default_settings)
                        return default_settings
        except Exception as e:
            logger.error(f"Error getting chat settings: {e}")
            return None

    def save_chat_settings(self, settings: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        try:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —á–∞—Ç–∞ {settings['chat_id']}, protect_comments: {settings.get('protect_comments')}")

            # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.update_database_schema()

            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('''
                        INSERT INTO chat_settings 
                        (chat_id, welcome_message, min_account_age_days, min_join_date_days, 
                         restrict_new_users, delete_service_messages, enabled, max_warnings, 
                         anti_flood_enabled, protect_comments)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        ON CONFLICT (chat_id) DO UPDATE SET
                        welcome_message = EXCLUDED.welcome_message,
                        min_account_age_days = EXCLUDED.min_account_age_days,
                        min_join_date_days = EXCLUDED.min_join_date_days,
                        restrict_new_users = EXCLUDED.restrict_new_users,
                        delete_service_messages = EXCLUDED.delete_service_messages,
                        enabled = EXCLUDED.enabled,
                        max_warnings = EXCLUDED.max_warnings,
                        anti_flood_enabled = EXCLUDED.anti_flood_enabled,
                        protect_comments = EXCLUDED.protect_comments
                    ''', (
                        settings['chat_id'],
                        settings['welcome_message'],
                        settings['min_account_age_days'],
                        settings['min_join_date_days'],
                        settings['restrict_new_users'],
                        settings['delete_service_messages'],
                        settings['enabled'],
                        settings['max_warnings'],
                        settings['anti_flood_enabled'],
                        settings.get('protect_comments', True)
                    ))
                    conn.commit()
                    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        except Exception as e:
            logger.error(f"Error saving chat settings: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å—Ç–æ–ª–±—Ü–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            if "protect_comments" in str(e) and "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e):
                logger.info("–°—Ç–æ–ª–±–µ—Ü protect_comments –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É...")
                self.update_database_schema()
                # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–æ–≤–∞
                self.save_chat_settings(settings)
            else:
                raise


    def log_action(self, chat_id: int, user_id: Optional[int], action_type: str, details: str = "") -> None:
            """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
            try:
                with self.get_connection() as conn:
                    with conn.cursor() as cursor:
                        cursor.execute(
                            'INSERT INTO statistics (chat_id, user_id, action_type, details) VALUES (%s, %s, %s, %s)',
                            (chat_id, user_id, action_type, details)
                        )
                        conn.commit()
            except Exception as e:
                logger.error(f"Error logging action: {e}")

    def get_statistics(self, chat_id: int, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
                    cursor.execute('''
                        SELECT action_type, COUNT(*) as count 
                        FROM statistics 
                        WHERE chat_id = %s AND timestamp >= CURRENT_TIMESTAMP - INTERVAL '%s days'
                        GROUP BY action_type
                    ''', (chat_id, days))
                    actions_stats = {row[0]: row[1] for row in cursor.fetchall()}

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
                    cursor.execute('''
                        SELECT DATE(timestamp), COUNT(*) 
                        FROM statistics 
                        WHERE chat_id = %s AND timestamp >= CURRENT_TIMESTAMP - INTERVAL '%s days'
                        GROUP BY DATE(timestamp) 
                        ORDER BY DATE(timestamp) DESC
                        LIMIT 7
                    ''', (chat_id, days))
                    daily_stats = list(cursor.fetchall())

                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    cursor.execute('''
                        SELECT COUNT(*) 
                        FROM statistics 
                        WHERE chat_id = %s AND DATE(timestamp) = CURRENT_DATE
                    ''', (chat_id,))
                    today_actions_result = cursor.fetchone()
                    today_actions = today_actions_result[0] if today_actions_result else 0

                    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    cursor.execute('''
                        SELECT COUNT(DISTINCT user_id) 
                        FROM statistics 
                        WHERE chat_id = %s AND DATE(timestamp) = CURRENT_DATE 
                        AND action_type = 'new_member'
                    ''', (chat_id,))
                    today_new_users_result = cursor.fetchone()
                    today_new_users = today_new_users_result[0] if today_new_users_result else 0

                    # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    cursor.execute('''
                        SELECT user_id, COUNT(*) as activity_count 
                        FROM statistics 
                        WHERE chat_id = %s AND timestamp >= CURRENT_TIMESTAMP - INTERVAL '%s days'
                        AND user_id IS NOT NULL
                        GROUP BY user_id 
                        ORDER BY activity_count DESC 
                        LIMIT 5
                    ''', (chat_id, days))
                    top_users = cursor.fetchall()

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    cursor.execute('''
                        SELECT SUM(warnings_count), COUNT(*) 
                        FROM user_warnings 
                        WHERE chat_id = %s
                    ''', (chat_id,))
                    warnings_result = cursor.fetchone()
                    total_warnings = warnings_result[0] if warnings_result and warnings_result[0] else 0
                    warned_users = warnings_result[1] if warnings_result and warnings_result[1] else 0

                    return {
                        'actions': actions_stats,
                        'daily_stats': daily_stats,
                        'today_actions': today_actions,
                        'today_new_users': today_new_users,
                        'top_users': top_users,
                        'total_warnings': total_warnings,
                        'warned_users': warned_users,
                        'total_actions': sum(actions_stats.values())
                    }
        except Exception as e:
            logger.error(f"Error getting statistics: {e}")
            return {
                'actions': {},
                'daily_stats': [],
                'today_actions': 0,
                'today_new_users': 0,
                'top_users': [],
                'total_warnings': 0,
                'warned_users': 0,
                'total_actions': 0
            }
        
    def get_detailed_statistics(self, chat_id: int) -> Dict[str, Any]:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            try:
                with self.get_connection() as conn:
                    with conn.cursor() as cursor:
                        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
                        cursor.execute('''
                            SELECT action_type, COUNT(*) as count 
                            FROM statistics 
                            WHERE chat_id = %s
                            GROUP BY action_type
                            ORDER BY count DESC
                        ''', (chat_id,))
                        all_time_stats = cursor.fetchall()

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
                        cursor.execute('''
                            SELECT 
                                TO_CHAR(timestamp, 'YYYY-MM') as month,
                                COUNT(*) as count
                            FROM statistics 
                            WHERE chat_id = %s
                            GROUP BY TO_CHAR(timestamp, 'YYYY-MM')
                            ORDER BY month DESC
                            LIMIT 6
                        ''', (chat_id,))
                        monthly_stats = cursor.fetchall()

                        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
                        cursor.execute('''
                            SELECT 
                                DATE(timestamp) as day,
                                COUNT(*) as count
                            FROM statistics 
                            WHERE chat_id = %s
                            GROUP BY DATE(timestamp)
                            ORDER BY count DESC
                            LIMIT 5
                        ''', (chat_id,))
                        top_days = cursor.fetchall()

                        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã
                        cursor.execute('''
                            SELECT 
                                COUNT(CASE WHEN action_type = 'user_blocked' THEN 1 END) as blocked,
                                COUNT(CASE WHEN action_type = 'new_member' THEN 1 END) as new_members,
                                COUNT(CASE WHEN action_type = 'welcome_sent' THEN 1 END) as welcomes
                            FROM statistics 
                            WHERE chat_id = %s AND timestamp >= CURRENT_TIMESTAMP - INTERVAL '30 days'
                        ''', (chat_id,))
                        protection_stats = cursor.fetchone()

                        return {
                            'all_time': all_time_stats,
                            'monthly': monthly_stats,
                            'top_days': top_days,
                            'protection': protection_stats
                        }
            except Exception as e:
                logger.error(f"Error getting detailed statistics: {e}")
                return {
                    'all_time': [],
                    'monthly': [],
                    'top_days': [],
                    'protection': (0, 0, 0)
                }

    def add_user_warning(self, chat_id: int, user_id: int) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('''
                        INSERT INTO user_warnings (chat_id, user_id, warnings_count, last_warning)
                        VALUES (%s, %s, 1, CURRENT_TIMESTAMP)
                        ON CONFLICT (chat_id, user_id) DO UPDATE SET
                        warnings_count = user_warnings.warnings_count + 1,
                        last_warning = CURRENT_TIMESTAMP
                        RETURNING warnings_count
                    ''', (chat_id, user_id))
                    result = cursor.fetchone()
                    conn.commit()
                    return result[0] if result else 1
        except Exception as e:
            logger.error(f"Error adding user warning: {e}")
            return 1

    def get_user_warnings(self, chat_id: int, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        'SELECT warnings_count FROM user_warnings WHERE chat_id = %s AND user_id = %s',
                        (chat_id, user_id)
                    )
                    result = cursor.fetchone()
                    return result[0] if result else 0
        except Exception as e:
            logger.error(f"Error getting user warnings: {e}")
            return 0

    def reset_user_warnings(self, chat_id: int, user_id: int) -> None:
        """–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        'DELETE FROM user_warnings WHERE chat_id = %s AND user_id = %s',
                        (chat_id, user_id)
                    )
                    conn.commit()
        except Exception as e:
            logger.error(f"Error resetting user warnings: {e}")

    def reset_all_statistics(self, chat_id: int) -> None:
        """–°–±—Ä–æ—Å –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('DELETE FROM statistics WHERE chat_id = %s', (chat_id,))
                    cursor.execute('DELETE FROM user_warnings WHERE chat_id = %s', (chat_id,))
                    conn.commit()
        except Exception as e:
            logger.error(f"Error resetting statistics: {e}")

    def check_flood_control(self, chat_id: int, user_id: int, time_window: int = 10, max_messages: int = 5) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                    cursor.execute(
                        'DELETE FROM flood_control WHERE last_message < CURRENT_TIMESTAMP - INTERVAL %s SECOND',
                        (time_window,)
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    cursor.execute('''
                        SELECT message_count FROM flood_control 
                        WHERE chat_id = %s AND user_id = %s
                    ''', (chat_id, user_id))
                    
                    result = cursor.fetchone()
                    
                    if result:
                        message_count = result[0] + 1
                        cursor.execute('''
                            UPDATE flood_control 
                            SET message_count = %s, last_message = CURRENT_TIMESTAMP
                            WHERE chat_id = %s AND user_id = %s
                        ''', (message_count, chat_id, user_id))
                    else:
                        message_count = 1
                        cursor.execute('''
                            INSERT INTO flood_control (chat_id, user_id, message_count)
                            VALUES (%s, %s, %s)
                        ''', (chat_id, user_id, message_count))
                    
                    conn.commit()
                    return message_count > max_messages
                    
        except Exception as e:
            logger.error(f"Error checking flood control: {e}")
            return False

    def reset_flood_control(self, chat_id: int, user_id: int) -> None:
        """–°–±—Ä–æ—Å —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        'DELETE FROM flood_control WHERE chat_id = %s AND user_id = %s',
                        (chat_id, user_id)
                    )
                    conn.commit()
        except Exception as e:
            logger.error(f"Error resetting flood control: {e}")
    
    def update_database_schema(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ protect_comments
                    cursor.execute('''
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = 'chat_settings' AND column_name = 'protect_comments'
                    ''')
                    if not cursor.fetchone():
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
                        cursor.execute('ALTER TABLE chat_settings ADD COLUMN protect_comments BOOLEAN DEFAULT TRUE')
                        logger.info("Added protect_comments column to chat_settings table")

                    conn.commit()
        except Exception as e:
            logger.error(f"Error updating database schema: {e}")
    
    def check_table_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã chat_settings"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('''
                        SELECT column_name, data_type, column_default 
                        FROM information_schema.columns 
                        WHERE table_name = 'chat_settings' 
                        ORDER BY ordinal_position
                    ''')
                    columns = cursor.fetchall()
                    logger.info("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã chat_settings:")
                    for column in columns:
                        logger.info(f"  {column[0]} ({column[1]}) - default: {column[2]}")
        except Exception as e:
            logger.error(f"Error checking table structure: {e}")
    
    def recreate_table_properly(self):
        """–ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS chat_settings_temp (
                            chat_id BIGINT PRIMARY KEY,
                            welcome_message TEXT DEFAULT 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ {chat}!',
                            min_account_age_days INTEGER DEFAULT 1,
                            min_join_date_days INTEGER DEFAULT 0,
                            restrict_new_users BOOLEAN DEFAULT TRUE,
                            delete_service_messages BOOLEAN DEFAULT TRUE,
                            enabled BOOLEAN DEFAULT TRUE,
                            max_warnings INTEGER DEFAULT 3,
                            anti_flood_enabled BOOLEAN DEFAULT TRUE,
                            protect_comments BOOLEAN DEFAULT TRUE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')

                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    try:
                        cursor.execute('''
                            INSERT INTO chat_settings_temp 
                            (chat_id, welcome_message, min_account_age_days, min_join_date_days, 
                             restrict_new_users, delete_service_messages, enabled, max_warnings, 
                             anti_flood_enabled, protect_comments, created_at)
                            SELECT 
                                chat_id, 
                                welcome_message, 
                                min_account_age_days, 
                                min_join_date_days,
                                restrict_new_users, 
                                delete_service_messages, 
                                enabled, 
                                max_warnings,
                                anti_flood_enabled,
                                TRUE as protect_comments,  -- –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                COALESCE(created_at, CURRENT_TIMESTAMP) as created_at
                            FROM chat_settings
                        ''')
                        logger.info("–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
                    except Exception as copy_error:
                        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {copy_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ–π

                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                    cursor.execute('DROP TABLE IF EXISTS chat_settings')

                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                    cursor.execute('ALTER TABLE chat_settings_temp RENAME TO chat_settings')

                    conn.commit()
                    logger.info("–¢–∞–±–ª–∏—Ü–∞ chat_settings –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")

        except Exception as e:
            logger.error(f"Error recreating table: {e}")
                
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = DatabaseManager(DATABASE_URL)
    logger.info("Database connected successfully")
except Exception as e:
    logger.error(f"Failed to initialize database: {e}")
    exit(1)
                                
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    chat = update.effective_chat
    message = update.message
    
    if not user or not chat or not message:
        return
        
    if chat.type == 'private':
        await message.reply_text(
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
            "üõ°Ô∏è <b>–Ø - —É–º–Ω—ã–π –±–æ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞</b>\n\n"
            "‚ú® <b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è\n"
            "‚Ä¢ ‚è±Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n" 
            "‚Ä¢ üåä –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞\n"
            "‚Ä¢ üëã –£–º–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
            "‚Ä¢ ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
            "‚Ä¢ üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "üöÄ <b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n"
            "2. –ù–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ /menu\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!</b>",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.reply_text(
            "üõ°Ô∏è <b>–ë–æ—Ç –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "üí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞—â–∏—Ç—ã",
            parse_mode=ParseMode.HTML
        )

async def safe_edit_message(
    context: ContextTypes.DEFAULT_TYPE, 
    chat_id: int, 
    message_id: int, 
    text: str, 
    reply_markup: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        return True
    except Exception as e:
        if "Message is not modified" in str(e):
            # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            logger.debug(f"Message {message_id} in chat {chat_id} was not modified (same content)")
            return True
        elif "Message to edit not found" in str(e):
            logger.warning(f"Message {message_id} not found in chat {chat_id}")
            return False
        else:
            logger.error(f"Error editing message {message_id} in chat {chat_id}: {e}")
            return False
    
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: Optional[int] = None, message_id: Optional[int] = None) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    query: Optional[CallbackQuery] = update.callback_query
    source_message: Optional[Message] = None
    chat: Optional[Chat] = None
    user: Optional[User] = None
    
    if query and query.message:
        # –í—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏
        source_message = query.message
        chat = source_message.chat
        user = query.from_user
    elif update.message:
        # –í—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        source_message = update.message
        chat = update.effective_chat
        user = update.effective_user
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
    if not chat or not user:
        logger.error("Cannot determine chat or user from update")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
    final_chat_id = chat_id or chat.id
    final_message_id = message_id or (source_message.message_id if source_message else None)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if chat.type != 'private':  # chat –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ None –∑–¥–µ—Å—å
        try:
            member = await context.bot.get_chat_member(chat.id, user.id)
            if member.status not in ['administrator', 'creator']:
                error_msg = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                if query:
                    await query.answer(error_msg, show_alert=True)
                elif source_message:
                    await source_message.reply_text(error_msg)
                return
        except Exception as e:
            logger.error(f"Error checking admin rights: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            # –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    
    try:
        settings_data = db.get_chat_settings(final_chat_id)
        if not settings_data:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            if query:
                await query.answer(error_msg, show_alert=True)
            elif source_message:
                await source_message.reply_text(error_msg)
            return
    except Exception as e:
        logger.error(f"Error getting chat settings: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        if query:
            await query.answer(error_msg, show_alert=True)
        elif source_message:
            await source_message.reply_text(error_msg)
        return
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üõ°Ô∏è –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã", callback_data="status")],
        [
            InlineKeyboardButton("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings"),
            InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="welcome_settings")
        ],
        [
            InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="comments_settings"),  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_menu"),
            InlineKeyboardButton("üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="quick_actions")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status_icon = "üü¢" if settings_data['enabled'] else "üî¥"
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
    chat_title = "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    if chat and hasattr(chat, 'title') and chat.title:
        chat_title = chat.title
    
    menu_text = (
        f"üéõÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞—â–∏—Ç—ã</b>\n\n"
        f"{status_icon} <b>–°—Ç–∞—Ç—É—Å:</b> {'–í–ö–õ–Æ–ß–ï–ù' if settings_data['enabled'] else '–í–´–ö–õ–Æ–ß–ï–ù'}\n"
        f"üë• <b>–ß–∞—Ç:</b> {chat_title}\n\n"
        f"üí´ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    try:
        if final_message_id and query:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.edit_message_text(
                chat_id=final_chat_id,
                message_id=final_message_id,
                text=menu_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        elif source_message:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await source_message.reply_text(
                menu_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
            await context.bot.send_message(
                chat_id=final_chat_id,
                text=menu_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error sending menu: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.send_message(
                chat_id=final_chat_id,
                text=menu_text + "\n\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as send_error:
            logger.error(f"Critical error sending menu: {send_error}")

async def show_status(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="main_settings")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_icon = "üü¢" if settings_data['enabled'] else "üî¥"
    age_icon = "‚úÖ" if settings_data['min_account_age_days'] > 0 else "‚ùå"
    welcome_icon = "‚úÖ" if settings_data['welcome_message'] != '' else "‚ùå"
    delete_icon = "‚úÖ" if settings_data['delete_service_messages'] else "‚ùå"
    flood_icon = "‚úÖ" if settings_data['anti_flood_enabled'] else "‚ùå"
    
    
    text = (
        f"üõ°Ô∏è <b>–°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã</b>\n\n"
        f"{status_icon} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {'–í–ö–õ–Æ–ß–ï–ù' if settings_data['enabled'] else '–í–´–ö–õ–Æ–ß–ï–ù'}\n\n"
        
        f"<b>üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        f"{age_icon} –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: <b>{settings_data['min_account_age_days']} –¥–Ω.</b>\n"
        f"{welcome_icon} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"{delete_icon} –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"{flood_icon} –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞\n"
        
        
        f"<b>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{settings_data['max_warnings']}</b>\n"
        f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'–í–ö–õ' if settings_data['restrict_new_users'] else '–í–´–ö–õ'}\n\n"
        
        f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    )
    
    if message_id:
        success = await safe_edit_message(context, chat_id, message_id, text, reply_markup)
        if not success:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text=text + "\n\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_main_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [
            InlineKeyboardButton(f"{'üî¥ –í—ã–∫–ª' if settings_data['enabled'] else 'üü¢ –í–∫–ª'} –±–æ—Ç–∞", 
                               callback_data="toggle_enable"),
            InlineKeyboardButton("üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="age_settings")
        ],
        [
            InlineKeyboardButton(f"{'‚úÖ' if settings_data['delete_service_messages'] else '‚ùå'} –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", 
                               callback_data="toggle_service"),
            InlineKeyboardButton(f"{'‚úÖ' if settings_data['anti_flood_enabled'] else '‚ùå'} –ê–Ω—Ç–∏-—Ñ–ª—É–¥", 
                               callback_data="toggle_flood")
        ],
        [
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="warnings_settings"),
            InlineKeyboardButton("üë§ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="restrict_settings")
        ],
        
        [
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    text = (
        f"‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: <b>{'–í–ö–õ–Æ–ß–ï–ù' if settings_data['enabled'] else '–í–´–ö–õ–Æ–ß–ï–ù'}</b>\n"
        f"‚Ä¢ –ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: <b>{settings_data['min_account_age_days']} –¥–Ω.</b>\n"
        f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{'–í–ö–õ' if settings_data['delete_service_messages'] else '–í–´–ö–õ'}</b>\n"
        f"‚Ä¢ –ê–Ω—Ç–∏-—Ñ–ª—É–¥: <b>{'–í–ö–õ' if settings_data['anti_flood_enabled'] else '–í–´–ö–õ'}</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{settings_data['max_warnings']}</b>\n"
        f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö: <b>{'–í–ö–õ' if settings_data['restrict_new_users'] else '–í–´–ö–õ'}</b>\n"
        
        f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</i>\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    )
    
    if message_id:
        success = await safe_edit_message(context, chat_id, message_id, text, reply_markup)
        if not success:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_welcome_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="set_welcome")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="view_welcome")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É", callback_data="reset_welcome")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_preview = settings_data['welcome_message'][:100] + "..." if len(settings_data['welcome_message']) > 100 else settings_data['welcome_message']
    
    text = (
        f"üëã <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π</b>\n\n"
        f"<b>–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>\n"
        f"<code>{welcome_preview}</code>\n\n"
        
        f"<b>üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>\n"
        f"‚Ä¢ <code>{{name}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ <code>{{mention}}</code> - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        f"‚Ä¢ <code>{{chat}}</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞\n"
        f"‚Ä¢ <code>{{rules}}</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞\n\n"
        
        f"üí° <i>–ü—Ä–∏–º–µ—Ä: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {{mention}}! üéâ</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_quick_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [
            InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –≤—Å—ë", callback_data="enable_all"),
            InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë", callback_data="disable_all")
        ],
        [
            InlineKeyboardButton("üõ°Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞", callback_data="standard_preset"),
            InlineKeyboardButton("üö´ –ú–∞–∫—Å. –∑–∞—â–∏—Ç–∞", callback_data="max_preset")
        ],
        [
            InlineKeyboardButton("üìä –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset_stats"),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="reload_bot")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"üîß <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
        f"üí´ <b>–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>\n"
        f"‚Ä¢ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞</b> - –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        f"‚Ä¢ <b>–ú–∞–∫—Å. –∑–∞—â–∏—Ç–∞</b> - —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º\n\n"
        
        f"‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏\n"
        f"‚Ä¢ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞\n\n"
        
        f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_age_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [InlineKeyboardButton("0 –¥–Ω–µ–π - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ", callback_data="age_0")],
        [InlineKeyboardButton("1 –¥–µ–Ω—å - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="age_1")],
        [InlineKeyboardButton("3 –¥–Ω—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", callback_data="age_3")],
        [InlineKeyboardButton("7 –¥–Ω–µ–π - —Å—Ç—Ä–æ–≥–∞—è", callback_data="age_7")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è", callback_data="age_30")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings"),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_age = settings_data['min_account_age_days']
    age_description = {
        0: "üü¢ –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
        1: "üü° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞", 
        3: "üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞",
        7: "üî¥ –°—Ç—Ä–æ–≥–∞—è –∑–∞—â–∏—Ç–∞",
        30: "üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞"
    }.get(current_age, "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    text = (
        f"üìÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
        f"‚Ä¢ <b>{current_age} –¥–Ω–µ–π</b> - {age_description}\n\n"
        
        f"<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        f"‚Ä¢ <b>0 –¥–Ω–µ–π</b> - –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤\n"
        f"‚Ä¢ <b>1-3 –¥–Ω—è</b> - –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø\n"
        f"‚Ä¢ <b>7+ –¥–Ω–µ–π</b> - –¥–ª—è –≤–∞–∂–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n"
        
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_warnings_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûñ", callback_data="decrease_warnings"),
            InlineKeyboardButton(f"–¢–µ–∫—É—â–µ–µ: {settings_data['max_warnings']}", callback_data="noop"),
            InlineKeyboardButton("‚ûï", callback_data="increase_warnings")
        ],
        [InlineKeyboardButton("‚ö° –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—Ä–Ω—ã", callback_data="reset_all_warnings")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings"),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"‚ö†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{settings_data['max_warnings']}</b>\n\n"
        
        f"<b>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: <b>3-5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>\n\n"
        
        f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ú–µ–Ω—é –ø–æ–º–æ—â–∏"""
    keyboard = [
        [InlineKeyboardButton("üìö –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", callback_data="bot_commands")],
        [InlineKeyboardButton("üõ°Ô∏è –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="setup_guide")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"‚ùì <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        f"üí´ <b>–†–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏:</b>\n"
        f"‚Ä¢ üìö <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        f"‚Ä¢ üõ°Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã</b> - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n"
        f"‚Ä¢ ‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"‚Ä¢ üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º\n\n"
        
        f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats_data: Dict[str, Any] = db.get_statistics(chat_id, days=7)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    top_users_info: List[str] = []
    for user_id, count in stats_data.get('top_users', [])[:3]:
        try:
            user = await context.bot.get_chat_member(chat_id, user_id)
            name = user.user.first_name or f"User {user_id}"
            top_users_info.append(f"‚Ä¢ {name}: {count} –¥–µ–π—Å—Ç–≤–∏–π")
        except Exception:
            top_users_info.append(f"‚Ä¢ User {user_id}: {count} –¥–µ–π—Å—Ç–≤–∏–π")
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats")],
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_stats_confirm")],
        [
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    actions: Dict[str, int] = stats_data.get('actions', {})
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã</b>\n\n"
        
        f"<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
        f"‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{actions.get('new_member', 0)}</b>\n"
        f"‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: <b>{actions.get('user_blocked', 0)}</b>\n"
        f"‚Ä¢ üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{actions.get('welcome_sent', 0)}</b>\n"
        f"‚Ä¢ ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{stats_data.get('total_warnings', 0)}</b>\n"
        f"‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{actions.get('service_message_deleted', 0)}</b>\n"
        f"‚Ä¢ üìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: <b>{stats_data.get('total_actions', 0)}</b>\n\n"
        
        f"<b>üìÖ –°–µ–≥–æ–¥–Ω—è:</b>\n"
        f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π: <b>{stats_data.get('today_actions', 0)}</b>\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats_data.get('today_new_users', 0)}</b>\n\n"
        
        f"<b>üë• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    )
    
    if top_users_info:
        text += "\n".join(top_users_info) + "\n\n"
    else:
        text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        
    text += f"üí° <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    detailed_stats: Dict[str, Any] = db.get_detailed_statistics(chat_id)
    
    keyboard = [
        [InlineKeyboardButton("üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="detailed_stats")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="stats"),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_time_text = ""
    for action, count in detailed_stats.get('all_time', [])[:10]:
        action_name = {
            'new_member': 'üë§ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏',
            'user_blocked': 'üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
            'welcome_sent': 'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
            'service_message_deleted': 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            'warning_issued': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'
        }.get(action, action)
        all_time_text += f"‚Ä¢ {action_name}: <b>{count}</b>\n"
    
    monthly_text = ""
    for month, count in detailed_stats.get('monthly', [])[:6]:
        month_name = datetime.strptime(month, '%Y-%m').strftime('%B %Y')
        monthly_text += f"‚Ä¢ {month_name}: <b>{count}</b> –¥–µ–π—Å—Ç–≤–∏–π\n"
    
    protection: Tuple[int, int, int] = detailed_stats.get('protection', (0, 0, 0))
    if protection[1] > 0:
        efficiency = (protection[0] / protection[1]) * 100
    else:
        efficiency = 0.0
    
    text = (
        f"üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        f"<b>üõ°Ô∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã (30 –¥–Ω–µ–π):</b>\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∞–º–µ—Ä–æ–≤: <b>{protection[0]}</b>\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{protection[1]}</b>\n"
        f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{efficiency:.1f}%</b>\n\n"
        
        f"<b>üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º:</b>\n"
        f"{monthly_text or '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        
        f"<b>üèÜ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
        f"{all_time_text or '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        
        f"üí° <i>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—â–∏—Ç—ã</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        
async def show_reset_stats_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_stats"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="stats")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"üóëÔ∏è <b>–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞:\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n"
        f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –í—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    if not query or not query.message:
        return
        
    await query.answer()
    
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    data = query.data
    
    if not data:
        return
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
    if data == "main_menu":
        await menu(update, context, chat_id, message_id)
        return
    elif data == "status":
        await show_status(update, context, chat_id, message_id)
        return
    elif data == "main_settings":
        await show_main_settings(update, context, chat_id, message_id)
        return
    elif data == "welcome_settings":
        await show_welcome_settings(update, context, chat_id, message_id)
        return
    elif data == "quick_actions":
        await show_quick_actions(update, context, chat_id, message_id)
        return
    elif data == "age_settings":
        await show_age_settings(update, context, chat_id, message_id)
        return
    elif data == "warnings_settings":
        await show_warnings_settings(update, context, chat_id, message_id)
        return
    elif data == "help_menu":
        await show_help_menu(update, context, chat_id, message_id)
        return
    elif data == "stats":
        await show_stats(update, context, chat_id, message_id)
        return
    elif data == "detailed_stats":
        await show_detailed_stats(update, context, chat_id, message_id)
        return
    elif data == "reset_stats_confirm":
        await show_reset_stats_confirm(update, context, chat_id, message_id)
        return
    elif data == "reset_stats":
        db.reset_all_statistics(chat_id)
        await query.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        await show_stats(update, context, chat_id, message_id)
        return
    elif data == "bot_commands":
        await show_bot_commands(update, context, chat_id, message_id)
        return
    elif data == "setup_guide":
        await show_setup_guide(update, context, chat_id, message_id)
        return
    elif data == "faq":
        await show_faq(update, context, chat_id, message_id)
        return
    elif data == "support":
        await show_support(update, context, chat_id, message_id)
        return
    elif data == "comments_settings":
        await show_comments_settings(update, context, chat_id, message_id)
        return
    elif data == "toggle_comments":
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ toggle_comments –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        await toggle_comments_protection(update, context, chat_id, message_id)
        return
    elif data == "comments_stats":
        await show_comments_stats(update, context, chat_id, message_id)
        return
    elif data == "flood_settings":
        await show_flood_settings(update, context, chat_id, message_id)
        return
    elif data == "reset_flood_stats":
        try:
            with db.get_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute('DELETE FROM flood_control WHERE chat_id = %s', (chat_id,))
                    conn.commit()
            await query.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–ª—É–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
            await show_flood_settings(update, context, chat_id, message_id)
        except Exception as e:
            logger.error(f"Error resetting flood stats: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    elif data == "reset_all_warnings":
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ —á–∞—Ç–µ
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä: db.reset_all_warnings(chat_id)
        await query.answer("‚úÖ –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
        await show_warnings_settings(update, context, chat_id, message_id)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    elif data.startswith("age_"):
        days = int(data.split("_")[1])
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data['min_account_age_days'] = days
            db.save_chat_settings(settings_data)
            await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç: {days} –¥–Ω–µ–π")
            await show_age_settings(update, context, chat_id, message_id)
    
    elif data.startswith("toggle_"):
        settings_data = db.get_chat_settings(chat_id)
        if not settings_data:
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é status_text
        status_text = ""
        if data == "toggle_enable":
            settings_data['enabled'] = not settings_data['enabled']
            status_text = "–≤–∫–ª—é—á–µ–Ω" if settings_data['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        elif data == "toggle_service":
            settings_data['delete_service_messages'] = not settings_data['delete_service_messages']
            status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if settings_data['delete_service_messages'] else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        elif data == "toggle_flood":
            settings_data['anti_flood_enabled'] = not settings_data['anti_flood_enabled']
            status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if settings_data['anti_flood_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        elif data == "toggle_restrict":
            settings_data['restrict_new_users'] = not settings_data['restrict_new_users']
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if settings_data['restrict_new_users'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        
                
        db.save_chat_settings(settings_data)
        await query.answer(f"‚úÖ –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º {status_text}")
        await show_main_settings(update, context, chat_id, message_id)
    
    elif data in ["increase_warnings", "decrease_warnings"]:
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            if data == "increase_warnings":
                settings_data['max_warnings'] = min(10, settings_data['max_warnings'] + 1)
            else:
                settings_data['max_warnings'] = max(1, settings_data['max_warnings'] - 1)
                
            db.save_chat_settings(settings_data)
            await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {settings_data['max_warnings']} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            await show_warnings_settings(update, context, chat_id, message_id)
    
    elif data == "set_welcome":
        await query.edit_message_text(
            "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n"
            "<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</i>\n"
            "<code>{name}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "<code>{mention}</code> - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "<code>{chat}</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞\n"
            "<code>{rules}</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! üéâ –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å {rules}.</code>\n\n"
            "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç:</i>",
            parse_mode=ParseMode.HTML
        )
        if context.user_data is not None:
            context.user_data['awaiting_welcome'] = True
            context.user_data['settings_message_id'] = message_id
    
    elif data == "view_welcome":
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            await query.answer(f"üìù –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {settings_data['welcome_message']}", show_alert=True)
    
    elif data == "reset_welcome":
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data['welcome_message'] = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ {chat}!'
            db.save_chat_settings(settings_data)
            await query.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É")
            await show_welcome_settings(update, context, chat_id, message_id)
    
    elif data == "noop":
        await query.answer()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    elif data == "enable_all":
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data.update({
                'enabled': True,
                'restrict_new_users': True,
                'delete_service_messages': True,
                'anti_flood_enabled': True
            })
            db.save_chat_settings(settings_data)
            await query.answer("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã")
            await show_quick_actions(update, context, chat_id, message_id)
    
    elif data == "disable_all":
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data.update({
                'enabled': False,
                'restrict_new_users': False,
                'delete_service_messages': False,
                'anti_flood_enabled': False
            })
            db.save_chat_settings(settings_data)
            await query.answer("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã")
            await show_quick_actions(update, context, chat_id, message_id)
    
    elif data == "standard_preset":
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data.update({
                'enabled': True,
                'min_account_age_days': 1,
                'restrict_new_users': True,
                'delete_service_messages': True,
                'anti_flood_enabled': True,
                'max_warnings': 3
            })
            db.save_chat_settings(settings_data)
            await query.answer("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞")
            await show_quick_actions(update, context, chat_id, message_id)
    
    elif data == "max_preset":
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data.update({
                'enabled': True,
                'min_account_age_days': 7,
                'restrict_new_users': True,
                'delete_service_messages': True,
                'anti_flood_enabled': True,
                'max_warnings': 2
            })
            db.save_chat_settings(settings_data)
            await query.answer("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞")
            await show_quick_actions(update, context, chat_id, message_id)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    chat = update.effective_chat
    
    if not message or not chat or not context.user_data:
        return
        
    if 'awaiting_welcome' in context.user_data and context.user_data['awaiting_welcome']:
        chat_id = chat.id
        welcome_message = message.text
        
        if not welcome_message:
            return
            
        settings_data = db.get_chat_settings(chat_id)
        if settings_data:
            settings_data['welcome_message'] = welcome_message
            db.save_chat_settings(settings_data)
            
            del context.user_data['awaiting_welcome']
            message_id = context.user_data.get('settings_message_id')
            if 'settings_message_id' in context.user_data:
                del context.user_data['settings_message_id']
                
            await message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
            if message_id:
                await show_welcome_settings(update, context, chat_id, message_id)
                
async def new_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    chat = update.effective_chat
    message = update.message
    
    if not chat or not message:
        return
        
    settings_data = db.get_chat_settings(chat.id)
    
    if not settings_data or not settings_data['enabled']:
        return
    
    for member in message.new_chat_members:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ member –Ω–µ None
        if not member:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if member.id == context.bot.id:
            continue
            
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        db.log_action(chat.id, member.id, 'new_member', f'username: {member.username}')
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —è–≤–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–∞
        if settings_data['min_account_age_days'] > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç—É date
            member_date = getattr(member, 'date', None)
            if member_date:
                # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è account_age_delta
                account_age_delta: timedelta = datetime.now().replace(tzinfo=None) - member_date.replace(tzinfo=None)
                account_age_days: int = account_age_delta.days
                
                if account_age_days < settings_data['min_account_age_days']:
                    try:
                        await context.bot.ban_chat_member(chat.id, member.id)
                        await context.bot.unban_chat_member(chat.id, member.id)
                        db.log_action(chat.id, member.id, 'user_blocked', f'young_account_{account_age_days}days')
                        logger.info(f"Kicked user {member.id} for young account")
                        continue
                    except Exception as e:
                        logger.error(f"Error kicking user: {e}")
        
        
        if settings_data['welcome_message']:
            welcome_text = settings_data['welcome_message']
            
            user_name = member.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            user_mention = f'<a href="tg://user?id={member.id}">{user_name}</a>'
            chat_title = chat.title or '—á–∞—Ç'
            
            welcome_text = welcome_text.replace('{name}', user_name)
            welcome_text = welcome_text.replace('{mention}', user_mention)
            welcome_text = welcome_text.replace('{chat}', chat_title)
            welcome_text = welcome_text.replace('{rules}', '–ø—Ä–∞–≤–∏–ª–∞–º–∏')
            
            try:
                await message.reply_text(welcome_text, parse_mode=ParseMode.HTML)
                db.log_action(chat.id, member.id, 'welcome_sent')
            except Exception as e:
                logger.error(f"Error sending welcome message: {e}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞)
    if settings_data['delete_service_messages']:
        try:
            await message.delete()
            db.log_action(chat.id, None, 'service_message_deleted')
        except Exception as e:
            logger.error(f"Error deleting service message: {e}")


async def enable_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /enable"""
    chat = update.effective_chat
    message = update.message
    
    if not chat or not message:
        return
        
    settings_data = db.get_chat_settings(chat.id)
    if settings_data:
        settings_data['enabled'] = True
        db.save_chat_settings(settings_data)
        await message.reply_text("‚úÖ –ë–æ—Ç –∑–∞—â–∏—Ç—ã –≤–∫–ª—é—á–µ–Ω!")

async def disable_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /disable"""
    chat = update.effective_chat
    message = update.message
    
    if not chat or not message:
        return
        
    settings_data = db.get_chat_settings(chat.id)
    if settings_data:
        settings_data['enabled'] = False
        db.save_chat_settings(settings_data)
        await message.reply_text("‚ùå –ë–æ—Ç –∑–∞—â–∏—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    message = update.message
    
    if not message:
        return
        
    help_text = """
üõ°Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—â–∏—Ç—ã</b>

üéõÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/settings - –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/status - –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã
/enable - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
/disable - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞

üí´ <b>–£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞—â–∏—Ç—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üöÄ <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>
    """
    await message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º update –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        from telegram import Update
        if isinstance(update, Update):
            if update.callback_query and update.callback_query.data:
                logger.error(f"Callback data: {update.callback_query.data}")
            if update.message and update.message.text:
                logger.error(f"Message text: {update.message.text}")
        else:
            # –î–ª—è –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞ object –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            update_dict = update.__dict__ if hasattr(update, '__dict__') else {}
            if 'callback_query' in update_dict:
                callback_data = getattr(update_dict['callback_query'], 'data', 'N/A')
                logger.error(f"Callback data: {callback_data}")
            if 'message' in update_dict:
                message_text = getattr(update_dict['message'], 'text', 'N/A')
                logger.error(f"Message text: {message_text}")
    except Exception as e:
        logger.error(f"Error in error handler: {e}")


async def show_bot_commands(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–º–æ—â—å", callback_data="help_menu")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìö <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—â–∏—Ç—ã</b>\n\n"
        
        "üéõÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/start</code> - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "‚Ä¢ <code>/menu</code> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ <code>/settings</code> - –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ <code>/status</code> - –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã\n"
        "‚Ä¢ <code>/help</code> - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–æ–π:</b>\n"
        "‚Ä¢ <code>/enable</code> - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ <code>/disable</code> - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ <code>/stats</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        
        "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ <code>/warn</code> [–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ <code>/unwarn</code> [–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ <code>/warnings</code> [@username] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\n"
        
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/menu</code> –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
        
        "üöÄ <b>–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏:</b>\n"
        "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    
    if message_id:
        await safe_edit_message(context, chat_id, message_id, text, reply_markup)
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_setup_guide(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞—â–∏—Ç—ã"""
    keyboard = [
        [
            InlineKeyboardButton("üõ°Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="standard_preset"),
            InlineKeyboardButton("üö´ –ú–∞–∫—Å. –∑–∞—â–∏—Ç–∞", callback_data="max_preset")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–º–æ—â—å", callback_data="help_menu")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    bot_username = getattr(context.bot, 'username', 'your_bot_username')
    
    text = (
        "üõ°Ô∏è <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞—â–∏—Ç—ã</b>\n\n"
        
        "üìã <b>–®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ @{} –≤ –≥—Ä—É–ø–ø—É\n"
        "2. –ù–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "3. –í—ã–¥–∞–π—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞\n\n"
        
        "‚öôÔ∏è <b>–®–∞–≥ 2: –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/menu</code> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞—â–∏—Ç—ã\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        
        "üõ°Ô∏è <b>–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        
        "üîí <b>–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
        "‚Ä¢ <b>0 –¥–Ω–µ–π</b> - –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ <b>1 –¥–µ–Ω—å</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤\n"
        "‚Ä¢ <b>3 –¥–Ω—è</b> - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞\n"
        "‚Ä¢ <b>7+ –¥–Ω–µ–π</b> - —Å—Ç—Ä–æ–≥–∞—è –∑–∞—â–∏—Ç–∞\n\n"
        
        "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b>\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (3-5)\n"
        "‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/warn</code> –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        
        "üåä <b>–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–ø–∞–º–∞\n"
        "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        
        "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{name}}, {{mention}}, {{chat}}\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ {{rules}}\n\n"
        
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: 1-3 –¥–Ω—è\n"
        "‚Ä¢ –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 3\n"
        "‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞—â–∏—Ç—ã: –í–ö–õ\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –í–ö–õ"
    ).format(bot_username)
    
    if message_id:
        await safe_edit_message(context, chat_id, message_id, text, reply_markup)
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–º–æ—â—å", callback_data="help_menu")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        
        "üîß <b>–í–æ–ø—Ä–æ—Å: –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ /menu\n\n"
        
        "üë§ <b>–í–æ–ø—Ä–æ—Å: –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n"
        "‚Ä¢ –ò—Å–∫–ª—é—á–∏—Ç–µ —á–∞—Ç –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ\n\n"
        
        "üí¨ <b>–í–æ–ø—Ä–æ—Å: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –≤ /menu\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        
        "‚ö†Ô∏è <b>–í–æ–ø—Ä–æ—Å: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /warn [–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n"
        
        "üìä <b>–í–æ–ø—Ä–æ—Å: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (1-2 –¥–Ω—è)\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n\n"
        
        "üîÑ <b>–í–æ–ø—Ä–æ—Å: –ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /menu\n\n"
        
        "üö´ <b>–í–æ–ø—Ä–æ—Å: –ë–æ—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        "‚úÖ <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        "üí° <b>–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å?</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
    )
    
    if message_id:
        await safe_edit_message(context, chat_id, message_id, text, reply_markup)
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    keyboard = [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–º–æ—â—å", callback_data="help_menu"),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    support_info = (
        "ü§ù <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
        
        "üìû <b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:</b>\n"
        "‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
        "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        
        "üí¨ <b>–ö–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏:</b>\n"
        "‚Ä¢ <b>Telegram:</b> @username_—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n"
        "‚Ä¢ <b>Email:</b> developer@example.com\n"
        "‚Ä¢ <b>GitHub:</b> github.com/username/project\n\n"
        
        "üõ†Ô∏è <b>–ü–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:</b>\n"
        "‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "‚úÖ –í—ã–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞\n"
        "‚úÖ –ó–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
        "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω—ã –æ—Ç–≤–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ FAQ\n\n"
        
        "üìã <b>–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        "‚Ä¢ ID —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ /info)\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n"
        "‚Ä¢ –®–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n\n"
        
        "‚è±Ô∏è <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b>\n"
        "‚Ä¢ –û–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
        "‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –±—ã—Å—Ç—Ä–µ–µ\n"
        "‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ - –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏\n\n"
        
        "‚ù§Ô∏è <b>–ë–æ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!"
    )
    
    # –ó–∞–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
    support_text = support_info.replace("@username_—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "@Akula_Iv").replace("developer@example.com", "ivanakulin175@gmail.com").replace("github.com/username/project", "github.com/AkulinIvan/TelegramBotAntiSpam")
    
    if message_id:
        await safe_edit_message(context, chat_id, message_id, support_text, reply_markup)
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=support_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ"""
    chat = update.effective_chat
    user = update.effective_user
    message = update.message
    
    if not chat or not user or not message:
        return
        
    chat_info = (
        f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
        f"üÜî <b>ID —á–∞—Ç–∞:</b> <code>{chat.id}</code>\n"
        f"üë• <b>–¢–∏–ø:</b> {chat.type}\n"
        f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat.title if hasattr(chat, 'title') else '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n"
        f"üë§ <b>–í–∞—à ID:</b> <code>{user.id}</code>\n"
        f"üìõ <b>–í–∞—à–µ –∏–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üîó <b>Username:</b> @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üí° <b>–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
    )
    
    await message.reply_text(chat_info, parse_mode=ParseMode.HTML)

async def handle_comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    try:
        message = update.message
        if not message:
            return

        chat = update.effective_chat
        if not chat:
            return

        chat_id = message.chat_id
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        is_comment = False
        
        # –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ message_thread_id (–¥–ª—è —Ç–æ–ø–∏–∫–æ–≤/—Ñ–æ—Ä—É–º–æ–≤)
        if hasattr(message, 'message_thread_id') and message.message_thread_id is not None:
            is_comment = True
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ message_thread_id: {message.message_thread_id}")
            
        # –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏
        elif (message.reply_to_message and 
              hasattr(message.reply_to_message, 'message_thread_id') and 
              message.reply_to_message.message_thread_id is not None):
            is_comment = True
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ reply –≤ —Ç–æ–ø–∏–∫–µ")
            
        # –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        elif hasattr(message, 'is_topic_message') and message.is_topic_message:
            is_comment = True
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ is_topic_message")
            
        # –°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–æ—Ä—É–º–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞)
        elif hasattr(chat, 'type') and chat.type == 'supergroup' and hasattr(chat, 'is_forum') and chat.is_forum:
            is_comment = True
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä—É–º–µ")
        
        settings = db.get_chat_settings(chat_id)
        if not settings or not settings['enabled']:
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if is_comment and not settings.get('protect_comments', True):
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action_type = 'comment_posted' if is_comment else 'message_posted'
        db.log_action(chat_id, user_id, action_type, f'text: {message.text[:100] if message.text else "no text"}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        if is_comment and settings['min_account_age_days'] > 0:
            user_created = message.from_user.date
            if user_created:
                account_age = (datetime.now().replace(tzinfo=None) - user_created.replace(tzinfo=None)).days
                if account_age < settings['min_account_age_days']:
                    try:
                        await message.delete()
                        db.log_action(chat_id, user_id, 'comment_deleted', f'young_account_{account_age}days')
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        warning_msg = await message.reply_text(
                            f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω. –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ {settings['min_account_age_days']} –¥–Ω–µ–π.",
                            reply_to_message_id=message.message_id
                        )
                        
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                        await asyncio.sleep(5)
                        await warning_msg.delete()
                        
                        return
                    except Exception as e:
                        logger.error(f"Error deleting comment from young account: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è (–¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        if settings['anti_flood_enabled']:
            is_flood = db.check_flood_control(chat_id, user_id)
            if is_flood:
                try:
                    await message.delete()
                    action_deleted = 'comment_deleted' if is_comment else 'message_deleted'
                    db.log_action(chat_id, user_id, action_deleted, 'flood_detected')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    warnings_count = db.add_user_warning(chat_id, user_id)
                    
                    flood_msg = await message.reply_text(
                        f"‚ö†Ô∏è –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings_count}/{settings['max_warnings']}",
                        reply_to_message_id=message.message_id
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    if warnings_count >= settings['max_warnings']:
                        try:
                            await context.bot.ban_chat_member(chat_id, user_id)
                            await context.bot.unban_chat_member(chat_id, user_id)
                            ban_type = 'max_warnings_comments' if is_comment else 'max_warnings_messages'
                            db.log_action(chat_id, user_id, 'user_banned', ban_type)
                            
                            ban_msg = await message.reply_text(
                                "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                                reply_to_message_id=message.message_id
                            )
                            await asyncio.sleep(10)
                            await ban_msg.delete()
                        except Exception as e:
                            logger.error(f"Error banning user for flood: {e}")
                    
                    await asyncio.sleep(5)
                    await flood_msg.delete()
                    return
                    
                except Exception as e:
                    logger.error(f"Error handling flood: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        if is_comment and message.text:
            spam_keywords = ["http://", "https://", "–∫—É–ø–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", "—Å–∫–∏–¥–∫–∞", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞"]
            if any(keyword in message.text.lower() for keyword in spam_keywords):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                user_created = message.from_user.date
                if user_created:
                    account_age = (datetime.now().replace(tzinfo=None) - user_created.replace(tzinfo=None)).days
                    if account_age < 7:  # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
                        try:
                            await message.delete()
                            db.log_action(chat_id, user_id, 'comment_deleted', 'spam_link_detected')
                            
                            spam_msg = await message.reply_text(
                                "‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                                reply_to_message_id=message.message_id
                            )
                            await asyncio.sleep(5)
                            await spam_msg.delete()
                            return
                        except Exception as e:
                            logger.error(f"Error deleting spam comment: {e}")
                        
    except Exception as e:
        logger.error(f"Error in handle_comments: {e}")

async def show_flood_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    settings_data = db.get_chat_settings(chat_id)
    if not settings_data:
        return
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"{'üî¥ –í—ã–∫–ª' if settings_data['anti_flood_enabled'] else 'üü¢ –í–∫–ª'} —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å", 
                callback_data="toggle_flood"
            )
        ],
        [
            InlineKeyboardButton(
                f"{'üî¥ –í—ã–∫–ª' if settings_data.get('protect_comments', True) else 'üü¢ –í–∫–ª'} –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", 
                callback_data="toggle_comments"
            )
        ],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª—É–¥-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_flood_stats")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º", callback_data="comments_settings"),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–ª—É–¥–∞
    try:
        with db.get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute('''
                    SELECT COUNT(*) FROM flood_control 
                    WHERE chat_id = %s AND last_message >= CURRENT_TIMESTAMP - INTERVAL '1 hour'
                ''', (chat_id,))
                recent_flood_events = cursor.fetchone()[0] or 0
                
                cursor.execute('''
                    SELECT COUNT(DISTINCT user_id) FROM flood_control 
                    WHERE chat_id = %s AND last_message >= CURRENT_TIMESTAMP - INTERVAL '24 hours'
                ''', (chat_id,))
                flood_users_24h = cursor.fetchone()[0] or 0
    except Exception as e:
        logger.error(f"Error getting flood stats: {e}")
        recent_flood_events = 0
        flood_users_24h = 0
    
    text = (
        f"üåä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è</b>\n\n"
        
        f"<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å: <b>{'–í–ö–õ' if settings_data['anti_flood_enabled'] else '–í–´–ö–õ'}</b>\n"
        f"‚Ä¢ –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>{'–í–ö–õ' if settings_data.get('protect_comments', True) else '–í–´–ö–õ'}</b>\n"
        f"‚Ä¢ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: <b>5 —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n"
        f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: <b>10 —Å–µ–∫—É–Ω–¥</b>\n\n"
        
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–ª—É–¥–∞:</b>\n"
        f"‚Ä¢ –°–æ–±—ã—Ç–∏–π –∑–∞ —á–∞—Å: <b>{recent_flood_events}</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24—á: <b>{flood_users_24h}</b>\n\n"
        
        f"<b>üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚Ä¢ –ï—Å–ª–∏ –±–æ–ª—å—à–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 10 —Å–µ–∫—É–Ω–¥ - —Ñ–ª—É–¥\n"
        f"‚Ä¢ –ü—Ä–∏ —Ñ–ª—É–¥–µ - —É–¥–∞–ª–µ–Ω–∏–µ + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        f"‚Ä¢ –ü—Ä–∏ 3+ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω\n\n"
        
        f"üí° <i>–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É</i>"
    )
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
async def toggle_comments_protection(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ toggle_comments_protection –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        settings_data = db.get_chat_settings(chat_id)
        if not settings_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        current_value = settings_data.get('protect_comments', True)
        logger.info(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ protect_comments: {current_value}")
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        new_value = not current_value
        settings_data['protect_comments'] = new_value
        
        logger.info(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ protect_comments: {new_value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        db.save_chat_settings(settings_data)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        settings_data_after_save = db.get_chat_settings(chat_id)
        if settings_data_after_save:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - protect_comments: {settings_data_after_save.get('protect_comments')}")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await update.callback_query.answer(f"‚úÖ –ó–∞—â–∏—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {status}")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: –ó–∞—â–∏—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await show_comments_settings(update, context, chat_id, message_id)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error in toggle_comments_protection: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
async def show_comments_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ show_comments_settings –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        settings_data = db.get_chat_settings(chat_id)
        if not settings_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        protect_comments = settings_data.get('protect_comments', True)
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {protect_comments}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        button_text = f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if protect_comments else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –∑–∞—â–∏—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        logger.info(f"–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {button_text}")
        
        keyboard = [
            [InlineKeyboardButton(button_text, callback_data="toggle_comments")],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data="comments_stats"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è", callback_data="flood_settings")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_settings"),
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        stats = db.get_statistics(chat_id, 7)
        comments_stats = stats.get('actions', {}).get('comment_posted', 0)
        comments_deleted = stats.get('actions', {}).get('comment_deleted', 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if comments_stats > 0:
            efficiency = (comments_deleted / comments_stats) * 100
        else:
            efficiency = 0
        
        text = (
            f"üí¨ <b>–ó–∞—â–∏—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {'üü¢ –í–ö–õ–Æ–ß–ï–ù–ê' if protect_comments else 'üî¥ –í–´–ö–õ–Æ–ß–ï–ù–ê'}\n\n"
            
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>{comments_stats}</b>\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>{comments_deleted}</b>\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{efficiency:.1f}%</b>\n\n"
            
            f"<b>üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—â–∏—Ç—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"‚Ä¢ –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä —Å–ø–∞–º-—Å—Å—ã–ª–æ–∫\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n\n"
            
            f"üí° <i>–ó–∞—â–∏—Ç–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ –∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞</i>\n"
            f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        )
        
        if message_id:
            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
            success = await safe_edit_message(context, chat_id, message_id, text, reply_markup)
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=text + "\n\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
        else:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
        logger.info("show_comments_settings –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error in show_comments_settings: {e}")

async def show_comments_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: Optional[int] = None) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    stats_data = db.get_statistics(chat_id, 30)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
    detailed_stats = db.get_detailed_statistics(chat_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
    comments_actions = {}
    for action_type, count in stats_data.get('actions', {}).items():
        if 'comment' in action_type:
            comments_actions[action_type] = count
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤
    try:
        with db.get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute('''
                    SELECT user_id, COUNT(*) as comment_count 
                    FROM statistics 
                    WHERE chat_id = %s AND action_type = 'comment_posted'
                    AND timestamp >= CURRENT_TIMESTAMP - INTERVAL '30 days'
                    GROUP BY user_id 
                    ORDER BY comment_count DESC 
                    LIMIT 5
                ''', (chat_id,))
                top_commenters = cursor.fetchall()
    except Exception as e:
        logger.error(f"Error getting top commenters: {e}")
        top_commenters = []
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="comments_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", callback_data="comments_settings")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="comments_settings"),
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    total_comments = comments_actions.get('comment_posted', 0)
    deleted_comments = comments_actions.get('comment_deleted', 0)
    spam_blocked = comments_actions.get('comment_deleted', 0)  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
    
    if total_comments > 0:
        efficiency_rate = (deleted_comments / total_comments) * 100
    else:
        efficiency_rate = 0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤
    top_commenters_text = ""
    for i, (user_id, count) in enumerate(top_commenters[:3], 1):
        try:
            user = await context.bot.get_chat_member(chat_id, user_id)
            name = user.user.first_name or f"User {user_id}"
            top_commenters_text += f"{i}. {name}: {count} –∫–æ–º–º–µ–Ω—Ç.\n"
        except Exception:
            top_commenters_text += f"{i}. User {user_id}: {count} –∫–æ–º–º–µ–Ω—Ç.\n"
    
    if not top_commenters_text:
        top_commenters_text = "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</b>\n\n"
        
        f"<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (30 –¥–Ω–µ–π):</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>{total_comments}</b>\n"
        f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <b>{deleted_comments}</b>\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∞–º–∞: <b>{spam_blocked}</b>\n"
        f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{efficiency_rate:.1f}%</b>\n\n"
        
        f"<b>üõ°Ô∏è –î–µ—Ç–∞–ª–∏ –∑–∞—â–∏—Ç—ã:</b>\n"
        f"‚Ä¢ –ú–æ–ª–æ–¥—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: <b>{comments_actions.get('comment_deleted_young_account', 0)}</b>\n"
        f"‚Ä¢ –§–ª—É–¥: <b>{comments_actions.get('comment_deleted_flood', 0)}</b>\n"
        f"‚Ä¢ –°–ø–∞–º-—Å—Å—ã–ª–∫–∏: <b>{comments_actions.get('comment_deleted_spam', 0)}</b>\n\n"
        
        f"<b>üèÜ –¢–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤:</b>\n"
        f"{top_commenters_text}\n"
        
        f"<b>üí° –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    if total_comments == 0:
        text += "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏\n"
    elif efficiency_rate > 20:
        text += f"‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞ ({efficiency_rate:.1f}%)\n"
    elif efficiency_rate > 5:
        text += f"‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞ ({efficiency_rate:.1f}%)\n"
    else:
        text += f"‚Ä¢ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞ ({efficiency_rate:.1f}%)\n"
    
    if deleted_comments > 0:
        text += f"‚Ä¢ –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    
    if message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        token = cast(str, BOT_TOKEN)
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))
        application.add_handler(CommandHandler("settings", menu))  
        application.add_handler(CommandHandler("status", menu))   
        application.add_handler(CommandHandler("enable", enable_bot))
        application.add_handler(CommandHandler("disable", disable_bot))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("info", info_command))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_members))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            handle_comments
        ))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Bot error: {e}")

if __name__ == '__main__':
    main()